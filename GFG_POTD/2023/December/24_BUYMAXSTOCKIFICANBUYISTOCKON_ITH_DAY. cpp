class Solution {
    
private:

    static bool comp (pair <int, int> &a, pair <int, int> &b) {
        return a.first < b.first;
    }
    
public:
    
// Greedy Approach.
// T.C. -> O(N log N). :- To Sort The Array On Basis Of Stocks Price.
// S.C. -> O(N) :- Auxiliary Array To Store The Day No. Of Particular Stock And Then Sort.


    int buyMaximumProducts(int n, int k, int price[]) {
        
        // Make Pairs.
        vector <pair<int, int>> stockPrice(n);
        
        // 1st Element -> Stock Price.
        // 2nd Element -> Day Of Buying. -> Price Array Is 0-Indexed.
        
        for (int i=0; i < n; ++i) 
            stockPrice[i] = {price[i], i + 1};
        
        
        // Sort The Array On Basis Of Stocks Price.
        sort(stockPrice.begin(), stockPrice.end(), comp);
        
        int stocks_buy = 0;
        
        for (int i=0; i < n; ++i) {
            
            // Sufficient Money To Buy All Stocks.
            if (stockPrice[i].first * stockPrice[i].second <= k) {
                
                // Add Stocks Bought.
                stocks_buy += stockPrice[i].second;
                
                // Reduce The Money Available.
                k -= stockPrice[i].first * stockPrice[i].second;
            }
            
            else {
                
                // Divide The Available Money By Price Of Each Stock.
                stocks_buy += k / stockPrice[i].first;
                break;
            }
        }
        
        return stocks_buy;
    }
}
/*


Given an integer array nums and two integers k and p, return the number of distinct subarrays, which have at most k elements that are divisible by p.
*/





class Solution {
public:
    // TC : O(n^2)
    // SC : O(n^2)
    int countDistinct(vector<int>& nums, int k, int p) {
        unordered_set<string> set;

        for (int i = 0; i < nums.size(); i++) {
            int count = 0;
            string sb = "";

            for (int j = i; j < nums.size(); j++) {
                if (nums[j] % p == 0) {
                    count++;
                }

                if (count > k) {
                    break;
                }

                sb += to_string(nums[j]) + "_";
                set.insert(sb);
            }
        }

        // Printing the elements of the set
        //for (const string& s : set) {
         //   cout << s << endl;
       // }

        return set.size();
    }
};
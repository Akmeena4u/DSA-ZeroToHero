/*
Longest increasing subsequence--->

A subsequence of an array is a list of elements of the array where some elements are deleted ( or not deleted at all) and they should be in the same order in the subsequence as in the original array.

What is the Longest Increasing Subsequence?

The longest increasing subsequence is described as a subsequence of an array where:

All elements of the subsequence are in increasing order.
This subsequence itself is of the longest length possible.


Approch - 1
generate all subsequences and then manually filter the subsequences whose elements come in increasing order and then return the longest such subsequence. 

Tc-o(2^n)


Approch - 2
Here we want longest increasing subsequence on the way of generating all subsequences.

So here Dp comes into mind because here we are making decisions based on previous decisions whether it is increasing or not

Steps to generate dp recursive solutions:-
 
Step 1: Express the problem in terms of indexes.
Step 2: Explore all possibilities at a given index
Step 3:  Return the maximum of the choices


*/

class Solution {
public:

    int f(int index, int prev_ind, vector<int>&nums, int n,vector<vector<int>>&dp ){
        if(index==n)return 0;
        if(dp[index][prev_ind+1] != -1)return dp[index][prev_ind+1];    
        int len = 0 + f(index+1, prev_ind, nums, n,dp);

        if(prev_ind == -1 || nums[index] > nums[prev_ind]){
            len = max(len, 1 + f(index+1, index, nums, n,dp));
        } 
        return dp[index][prev_ind+1] = len;
    }
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return f(0,-1,nums,n,dp);
    }
};

//Tc-O(n^2) 